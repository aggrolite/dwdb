#!/usr/bin/env perl

use Mojo::Base -strict;
use Mojo::UserAgent;
use Mojo::Util qw(dumper);

use Getopt::Long qw(:config auto_abbrev);

GetOptions(
    yes => \my $YES,
) or die 'oops';

sub only_supported{
    my $results = shift or return undef;
    [   map { delete $_->{Supported}; $_ }
        grep { $_->{'Supported'} eq 'yes' } @$results
    ];
}

sub results {
    my $dom = shift;

    my @router_info;

    for my $router ($dom->find('tr.even, tr.odd')->each) {
        my @text = $router->find('td')->text->each;
        warn "Didn't get 5 text items!" if @text != 5;
        my %info;
        my @labels = ('Manufacturer', 'Model', 'Revision', 'Supported', 'Activation required');
        @info{@labels} = @text;
        push @router_info, \%info;
    }

    return
        @router_info
      ? $YES
          ? only_supported(\@router_info)
          : \@router_info
      : 'No results!';
}

sub do_search {
    my $q    = shift;
    my $ua   = Mojo::UserAgent->new;
    my $url  = 'http://www.dd-wrt.com/routerdb/de/routerResult.php';
    my $post = $ua->post(
        $url,
        form => {
            action   => 'routerList',
            criteria => $q,
            site     => 'drupal',
        }
    );
    if (my $res = $post->success) {
        my $results = results($res->dom);
        say ref($results) ? dumper($results) : $results;
    }
    else {
        my ($err, $code) = $post->error;
        die $code ? "$code response: $err" : "Connection error: $err";
    }
}

my $query = join ' ', @ARGV;
die 'You must specify a router name or model!' unless defined($query);
do_search($query);
